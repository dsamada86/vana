name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: <YOUR_AWS_REGION>

      - name: Deploy to AWS Lambda
        run: |
          aws cloudformation package \
            --template-file template.yml \
            --s3-bucket <YOUR_S3_BUCKET> \
            --output-template-file packaged-template.yml

          aws cloudformation deploy \
            --template-file packaged-template.yml \
            --stack-name <YOUR_STACK_NAME> \
            --capabilities CAPABILITY_IAM

      - name: Update API Gateway
        run: |
          aws apigateway create-deployment \
            --rest-api-id <YOUR_REST_API_ID> \
            --stage-name prod



#Asegúremos de reemplazar <YOUR_AWS_REGION>, <YOUR_S3_BUCKET>, <YOUR_STACK_NAME>, y <YOUR_REST_API_ID> con los valores adecuados para tu entorno.
#Este archivo de configuración ejecuta los siguientes pasos:
#Checkout code: Clona el código de tu repositorio.
#Configure AWS Credentials: Configura las credenciales de AWS para acceder a tu cuenta de AWS.
#Deploy to AWS Lambda: Empaqueta y despliega la función Lambda utilizando CloudFormation.
#Update API Gateway: Actualiza el API Gateway para reflejar los cambios en la función Lambda.
#Con este archivo de configuración, cada vez que hagas un push a la rama principal de tu repositorio en GitHub, 
#Se ejecutará este pipeline, lo que desplegará automáticamente los cambios en tus servicios de AWS. 
#Asegúremosno de ajustar y probar este pipeline según tus necesidades específicas y las configuraciones de tu entorno AWS.